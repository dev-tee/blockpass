@startuml

!include ../style.iuml

title U7 Generate Report

actor Student

Student -> App: submit report generation request
activate App

App -> DataManager: getPersonalCourses()
activate DataManager

DataManager -> StudentDB: getNumCourseParticipations(senderStudentID)
activate StudentDB

StudentDB --> DataManager: numCourses
deactivate StudentDB

loop number of own courses
  DataManager -> StudentDB: getCourseParticipationIDAt(senderStudentID, index);
  activate StudentDB

  StudentDB --> DataManager: participationID
  deactivate StudentDB

  DataManager -> CourseParticipationDB: getCourseParticipation(participationID)
  activate CourseParticipationDB

  CourseParticipationDB --> DataManager: ...courseID
  deactivate CourseParticipationDB

  DataManager -> CourseDB: getCourse(courseID)
  activate CourseDB

  CourseDB --> DataManager: course
  deactivate CourseDB
end

DataManager --> App: courses
deactivate DataManager

loop number of own courses
  App -> StudentManager: passedCourse(courseID)
  activate StudentManager

  StudentManager -> StudentManager: passedCourseAssignments(courseID)
  activate StudentManager

  group passed course assignments
    StudentManager -> CourseDB: getNumAssignments(courseID)
    activate CourseDB

    CourseDB --> StudentManager: numAssignments
    deactivate CourseDB

    loop number of assignments
      StudentManager -> CourseDB: getAssignmentIDAt(courseID, index)
      activate CourseDB

      CourseDB --> StudentManager: assignmentID
      deactivate CourseDB

      StudentManager -> StudentManager: passedAssignment(assignmentID)
      activate StudentManager

      group passed assignment
        StudentManager -> AssignmentDB: getAssignment(assignmentID)
        activate AssignmentDB

        AssignmentDB --> StudentManager: assignment
        deactivate AssignmentDB

        StudentManager -> StudentManager: getAssignmentPerformance(assignmentID)
        activate StudentManager

        group assignment performance
          StudentManager -> StudentManager: getAssignmentSubmissionIDs(assignmentID)
          activate StudentManager

          StudentManager -> StudentManager: getSubmissionIDs(referenceType = 0, assignmentID)
          activate StudentManager

          group referenced submission IDs
            StudentManager -> StudentDB: getNumStudentSubmissions(senderStudentID)
            activate StudentDB
            
            StudentDB --> StudentManager: numSubmissions
            deactivate StudentDB

            loop number of submissions
              StudentManager -> StudentDB: getStudentSubmissionIDAt(senderStudentID, index)
              activate StudentDB
              
              StudentDB --> StudentManager: studentsubmissionID
              deactivate StudentDB

              StudentManager -> StudentSubmissionDB: getStudentSubmission(studentsubmissionID)
              activate StudentSubmissionDB

              StudentSubmissionDB --> StudentManager: ...submissionID
              deactivate StudentSubmissionDB

              StudentManager -> SubmissionDB: getSubmission(submissionID)
              activate SubmissionDB

              SubmissionDB --> StudentManager: submission
              deactivate SubmissionDB
            end
          end

          StudentManager --> StudentManager: numReferencedSubmissions, ids
          deactivate StudentManager

          StudentManager --> StudentManager: submissions
          deactivate StudentManager

          loop number of submissions
            StudentManager -> DataManager: getAssessment(submissionID)
            activate DataManager

            group best assessment
              DataManager -> SubmissionDB: getAssessmentIDAt(submissionID, 0)
              activate SubmissionDB

              SubmissionDB --> DataManager: currentBestAssessmentID
              deactivate SubmissionDB

              DataManager -> AssessmentDB: getAssessment(currentBestAssessmentID)
              activate AssessmentDB

              AssessmentDB --> DataManager: currentBestAssessment
              deactivate AssessmentDB

              group find better assessment
                DataManager -> SubmissionDB: getNumAssessments(submissionID)
                activate SubmissionDB

                SubmissionDB --> DataManager: numAssessments
                deactivate SubmissionDB

                loop number of assessments
                  DataManager -> SubmissionDB: getAssessmentIDAt(submissionID, index)
                  activate SubmissionDB

                  SubmissionDB --> DataManager: assessmentID
                  deactivate SubmissionDB

                  DataManager -> AssessmentDB: getAssessment(assessmentID)
                  activate AssessmentDB

                  AssessmentDB --> DataManager: assessment
                  deactivate AssessmentDB

                  opt assessment.obtainedPoints > currentBestAssessment.obtainedPoints
                    DataManager -> DataManager: remember assessment
                  end
                end
              end
            end

            DataManager --> StudentManager: assessment
            deactivate DataManager

            opt assessment.assessed && assessment.obtainedPoints > obtainedPoints
              StudentManager -> StudentManager: remember maximum of obtained points
            end
          end
        end

        StudentManager --> StudentManager: obtainedPoints
        deactivate StudentManager
        ||8||
        
        ref over StudentManager: decide whether we passed that assignment

      end

      StudentManager --> StudentManager: passedAssignment ?
      deactivate StudentManager
      ||8||
    end

    ref over StudentManager: decide whether we passed the courses assignments

  end

  StudentManager --> StudentManager: passedCourseAssignments ?
  deactivate StudentManager

  StudentManager --> StudentManager: passedCourseTests(courseID)
  activate StudentManager

  ref over StudentManager, TestDB, StudentDB, CourseDB, StudentSubmissionDB, SubmissionDB, AssessmentDB: passed course tests

  StudentManager -> StudentManager: passedCourseTests ?
  deactivate StudentManager
  ||8||

  ref over StudentManager: decide whether we passed the course

  StudentManager --> App: passedCourse ?
  deactivate StudentManager

  App -> DataManager: getCourseAssignments(courseID)
  activate DataManager

  DataManager -> CourseDB: getNumAssignments(courseID)
  activate CourseDB
  
  CourseDB --> DataManager: numAssignments
  deactivate CourseDB

  loop number of assignments
    DataManager -> CourseDB: getAssignmentIDAt(courseID, index);
    activate CourseDB
    
    CourseDB --> DataManager: assignmentID
    deactivate CourseDB

    DataManager -> AssignmentDB: getAssignment(assignmentID)
    activate AssignmentDB

    AssignmentDB --> DataManager: assignment
    deactivate AssignmentDB
  end
  
  DataManager --> App: assignments
  deactivate DataManager

  loop number of assignments
    App -> StudentManager: getAssignmentPerformance(assignmentID)
    activate StudentManager

    ref over StudentManager, StudentDB, StudentSubmissionDB, SubmissionDB, AssessmentDB: assignment performance

    StudentManager --> App: obtainedPoints
    deactivate StudentManager

    App -> StudentManager: passedAssignment(assignmentID)
    activate StudentManager

    ref over StudentManager, AssignmentDB, StudentDB, StudentSubmissionDB, SubmissionDB, AssessmentDB: passed assignment

    StudentManager --> App: passedAssignment ?
    deactivate StudentManager
    
    App -> StudentManager: getAssignmentSubmissionIDs(assignmentID)
    activate StudentManager

    StudentManager -> StudentManager: getSubmissionIDs(referenceType = 0, assignmentID)
    activate StudentManager

    ref over StudentManager, StudentDB, StudentSubmissionDB, SubmissionDB: referenced submission IDs

    StudentManager --> StudentManager: numReferencedSubmissions, ids
    deactivate StudentManager

    StudentManager --> App: submissions
    deactivate StudentManager

    loop number of submissions
      App -> StudentManager: getAssessment(submissionID)
      activate StudentManager

      ref over StudentManager, SubmissionDB, AssessmentDB: best assessment

      StudentManager --> App: assessment
      deactivate StudentManager

      App -> DataManager: getSubmissionRelatedInfo(submissionID)
      activate DataManager

      DataManager -> SubmissionDB: getSubmission(submissionID)
      activate SubmissionDB

      SubmissionDB --> DataManager: ...submittedDate, referenceType, referenceID
      deactivate SubmissionDB

      alt referenceType == 0
        DataManager -> AssignmentDB: getAssignment(referenceID)
        activate AssignmentDB

        AssignmentDB --> DataManager: ...maxPoints, dueDate...
        deactivate AssignmentDB
      else referenceType == 1
      end

      DataManager --> App: maxPoints, submissionDate, dueDate
      deactivate DataManager
    end
  end

  ref over App, DataManager, StudentManager, TestDB, StudentDB, StudentSubmissionDB, SubmissionDB, AssessmentDB: loop for tests as well

end


deactivate StudentManager

hide footbox

@enduml